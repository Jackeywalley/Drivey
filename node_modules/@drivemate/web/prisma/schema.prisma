// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(CLIENT)
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  bookings      Booking[]
  payments      Payment[]
  vehicles      Vehicle[]
  notifications Notification[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       String?
  city          String?
  state         String?
  zipCode       String?
  country       String?
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Vehicle {
  id            String    @id @default(cuid())
  chauffeurId   String
  chauffeur     User      @relation(fields: [chauffeurId], references: [id], onDelete: Cascade)
  make          String
  model         String
  year          Int
  color         String
  licensePlate  String    @unique
  status        VehicleStatus @default(ACTIVE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
}

model Booking {
  id            String    @id @default(cuid())
  clientId      String
  client        User      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  chauffeurId   String?
  chauffeur     User?     @relation(fields: [chauffeurId], references: [id])
  vehicleId     String?
  vehicle       Vehicle?  @relation(fields: [vehicleId], references: [id])
  pickupLocation String
  dropoffLocation String
  pickupTime    DateTime
  status        BookingStatus @default(PENDING)
  price         Float
  payment       Payment?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Payment {
  id            String    @id @default(cuid())
  bookingId     String    @unique
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String    @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Notification {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title         String
  message       String
  type          NotificationType
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  CHAUFFEUR
  CLIENT
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  BOOKING
  PAYMENT
  SYSTEM
  ALERT
} 